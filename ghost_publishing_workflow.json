{
  "name": "Content Pipeline - Publish to Ghost (Enhanced)",
  "nodes": [
    {
      "parameters": {
        "triggerOn": "update",
        "databaseId": "{{ $env.NOTION_CONTENT_DB_ID }}",
        "filters": {
          "property": "Status",
          "select": {
            "equals": "Ready"
          }
        }
      },
      "id": "1",
      "name": "Notion Trigger (Ready)",
      "type": "n8n-nodes-base.notionTrigger",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "operation": "get",
        "pageId": "={{$json['id']}}"
      },
      "id": "2",
      "name": "Get Page Details",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ai_output_check",
              "leftValue": "={{$json['properties']['AI Output']['rich_text'][0]['plain_text']}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "title_check",
              "leftValue": "={{$json['properties']['Titel']['title'][0]['plain_text']}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3",
      "name": "Validate Ready Content",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare Ghost post data with proper escaping\nconst title = $input.first().json.properties['Titel'].title[0].plain_text;\nconst content = $input.first().json.properties['AI Output'].rich_text[0].plain_text;\nconst excerpt = $input.first().json.properties['Samenvatting (Excerpt)'].rich_text[0]?.plain_text || '';\nconst category = $input.first().json.properties['Categorie'].multi_select[0]?.name || 'General';\nconst tool = $input.first().json.properties['Tool'].select?.name || 'Unknown';\n\n// Escape HTML content\nconst escapeHtml = (text) => {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n};\n\n// Convert plain text to HTML with basic formatting\nconst formatContent = (text) => {\n  return text\n    .replace(/\\n\\n/g, '</p><p>')\n    .replace(/\\n/g, '<br>')\n    .replace(/^/, '<p>')\n    .replace(/$/, '</p>');\n};\n\nconst ghostPost = {\n  posts: [{\n    title: escapeHtml(title),\n    html: formatContent(escapeHtml(content)),\n    status: 'published',\n    tags: [category, tool],\n    custom_excerpt: escapeHtml(excerpt),\n    meta_description: escapeHtml(excerpt),\n    feature_image: $input.first().json.properties['Featured Image']?.files?.[0]?.url || null\n  }]\n};\n\nreturn {\n  json: ghostPost\n};"
      },
      "id": "4",
      "name": "Prepare Ghost Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "requestMethod": "POST",
        "url": "={{$env.GHOST_URL}}/ghost/api/admin/posts/?source=html",
        "jsonParameters": true,
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryDelay": 1000
          }
        },
        "sendHeaders": true,
        "headerParametersJson": "{\"Authorization\":\"Ghost {{$env.GHOST_ADMIN_API_KEY}}\",\"Content-Type\":\"application/json\"}",
        "bodyParametersJson": "={{$json}}"
      },
      "id": "5",
      "name": "Post to Ghost",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1050, 200],
      "retryOnFail": true,
      "maxRetries": 3
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ghost_success_check",
              "leftValue": "={{$node['Post to Ghost'].json['posts'][0]['url']}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6",
      "name": "Check Ghost Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "operation": "update",
        "pageId": "={{$json['id']}}",
        "properties": {
          "Status": {
            "select": {
              "name": "Published"
            }
          },
          "Publicatie-URL": {
            "url": "={{$node['Post to Ghost'].json['posts'][0]['url']}}"
          },
          "Ghost Post ID": {
            "rich_text": [
              {
                "text": {
                  "content": "={{$node['Post to Ghost'].json['posts'][0]['id']}}"
                }
              }
            ]
          },
          "Publish Date": {
            "date": {
              "start": "={{new Date().toISOString()}}"
            }
          }
        }
      },
      "id": "7",
      "name": "Update Page (Published)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [1450, 100]
    },
    {
      "parameters": {
        "operation": "update",
        "pageId": "={{$json['id']}}",
        "properties": {
          "Status": {
            "select": {
              "name": "Error"
            }
          },
          "Error Message": {
            "rich_text": [
              {
                "text": {
                  "content": "Ghost publication failed - missing AI output or title"
                }
              }
            ]
          },
          "Processing Date": {
            "date": {
              "start": "={{new Date().toISOString()}}"
            }
          }
        }
      },
      "id": "8",
      "name": "Update Page (Validation Error)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "operation": "update",
        "pageId": "={{$json['id']}}",
        "properties": {
          "Status": {
            "select": {
              "name": "Error"
            }
          },
          "Error Message": {
            "rich_text": [
              {
                "text": {
                  "content": "Ghost API error: {{$node['Post to Ghost'].json['errors'][0]['message'] || 'Unknown error'}}"
                }
              }
            ]
          },
          "Processing Date": {
            "date": {
              "start": "={{new Date().toISOString()}}"
            }
          }
        }
      },
      "id": "9",
      "name": "Update Page (Ghost Error)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "url": "={{$env.WEBHOOK_URL}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "workflow",
              "value": "Ghost Publishing"
            },
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "page_id",
              "value": "={{$json['id']}}"
            },
            {
              "name": "ghost_url",
              "value": "={{$node['Post to Ghost'].json['posts'][0]['url']}}"
            }
          ]
        },
        "options": {}
      },
      "id": "10",
      "name": "Send Success Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1650, 100]
    },
    {
      "parameters": {
        "url": "={{$env.WEBHOOK_URL}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "workflow",
              "value": "Ghost Publishing"
            },
            {
              "name": "status",
              "value": "error"
            },
            {
              "name": "page_id",
              "value": "={{$json['id']}}"
            },
            {
              "name": "error_message",
              "value": "={{$json['properties']['Error Message']['rich_text'][0]['plain_text']}}"
            }
          ]
        },
        "options": {}
      },
      "id": "11",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1650, 400]
    }
  ],
  "connections": {
    "Notion Trigger (Ready)": {
      "main": [
        [
          {
            "node": "Get Page Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Details": {
      "main": [
        [
          {
            "node": "Validate Ready Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Ready Content": {
      "main": [
        [
          {
            "node": "Prepare Ghost Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Page (Validation Error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Ghost Data": {
      "main": [
        [
          {
            "node": "Post to Ghost",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Ghost": {
      "main": [
        [
          {
            "node": "Check Ghost Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Ghost Success": {
      "main": [
        [
          {
            "node": "Update Page (Published)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Page (Ghost Error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page (Published)": {
      "main": [
        [
          {
            "node": "Send Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page (Ghost Error)": {
      "main": [
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "sequential",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "tags": [
    "content",
    "notion",
    "ghost",
    "publish",
    "enhanced"
  ]
}
