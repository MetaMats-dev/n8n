{
  "workflows": [
    {
      "name": "Content Pipeline - AI Processing (Enhanced)",
      "nodes": [
        {
          "parameters": {
            "triggerOn": "update",
            "databaseId": "{{ $env.NOTION_CONTENT_DB_ID }}",
            "filters": {
              "property": "Status",
              "select": {
                "equals": "In Progress"
              }
            }
          },
          "id": "1",
          "name": "Notion Trigger (In Progress)",
          "type": "n8n-nodes-base.notionTrigger",
          "typeVersion": 1,
          "position": [200, 300]
        },
        {
          "parameters": {
            "operation": "get",
            "pageId": "={{$json['id']}}"
          },
          "id": "2",
          "name": "Get Page Details",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [450, 300]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "title_check",
                  "leftValue": "={{$json['properties']['Titel']['title'][0]['plain_text']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                },
                {
                  "id": "content_check",
                  "leftValue": "={{$json['properties']['Inhoud (Body)']['rich_text'][0]['plain_text']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "3",
          "name": "Validate Content",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [650, 300]
        },
        {
          "parameters": {
            "mode": "complete",
            "model": "gpt-4-turbo-preview",
            "temperature": 0.7,
            "maxTokens": 2000,
            "prompt": "Schrijf of herschrijf de onderstaande tekst op een heldere, toegankelijke manier voor beginners. Geef praktische voorbeelden en een duidelijke structuur. Zorg ervoor dat de tekst minimaal 500 woorden bevat en goed gestructureerd is.\n\nTITEL: {{$json['properties']['Titel']['title'][0]['plain_text']}}\n\nTEKST:\n{{$json['properties']['Inhoud (Body)']['rich_text'][0]['plain_text']}}\n\nCategorie: {{$json['properties']['Categorie']['multi_select'][0]['name']}}\n\nTool: {{$json['properties']['Tool']['select']['name']}}"
          },
          "id": "4",
          "name": "AI Rewrite (ChatGPT)",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 2,
          "position": [850, 200],
          "credentials": {
            "openAIApi": "OpenAI API"
          },
          "retryOnFail": true,
          "maxRetries": 3
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "ai_output_check",
                  "leftValue": "={{$node['AI Rewrite (ChatGPT)'].json['text']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                },
                {
                  "id": "min_length_check",
                  "leftValue": "={{$node['AI Rewrite (ChatGPT)'].json['text'].length}}",
                  "rightValue": 500,
                  "operator": {
                    "type": "number",
                    "operation": "gte"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "5",
          "name": "Validate AI Output",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [1050, 200]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "AI Output": {
                "rich_text": [
                  {
                    "text": {
                      "content": "={{$node['AI Rewrite (ChatGPT)'].json['text']}}"
                    }
                  }
                ]
              },
              "AI Review": {
                "checkbox": true
              },
              "Status": {
                "select": {
                  "name": "Ready"
                }
              },
              "Processing Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "6",
          "name": "Update Page (Set Ready)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [1250, 100]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "Status": {
                "select": {
                  "name": "Error"
                }
              },
              "Error Message": {
                "rich_text": [
                  {
                    "text": {
                      "content": "Content validation failed - missing title or content"
                    }
                  }
                ]
              },
              "Processing Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "7",
          "name": "Update Page (Validation Error)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [850, 400]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "Status": {
                "select": {
                  "name": "Error"
                }
              },
              "Error Message": {
                "rich_text": [
                  {
                    "text": {
                      "content": "AI processing failed - output too short or empty"
                    }
                  }
                ]
              },
              "Processing Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "8",
          "name": "Update Page (AI Error)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [1250, 400]
        },
        {
          "parameters": {
            "url": "={{$env.WEBHOOK_URL}}",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "workflow",
                  "value": "AI Processing"
                },
                {
                  "name": "status",
                  "value": "error"
                },
                {
                  "name": "page_id",
                  "value": "={{$json['id']}}"
                },
                {
                  "name": "error_message",
                  "value": "={{$json['properties']['Error Message']['rich_text'][0]['plain_text']}}"
                }
              ]
            },
            "options": {}
          },
          "id": "9",
          "name": "Send Error Notification",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1450, 400]
        }
      ],
      "connections": {
        "Notion Trigger (In Progress)": {
          "main": [
            [
              {
                "node": "Get Page Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Page Details": {
          "main": [
            [
              {
                "node": "Validate Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Content": {
          "main": [
            [
              {
                "node": "AI Rewrite (ChatGPT)",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Update Page (Validation Error)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Rewrite (ChatGPT)": {
          "main": [
            [
              {
                "node": "Validate AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate AI Output": {
          "main": [
            [
              {
                "node": "Update Page (Set Ready)",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Update Page (AI Error)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Page (AI Error)": {
          "main": [
            [
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "sequential",
        "saveManualExecutions": true,
        "callerPolicy": "workflowsFromSameOwner",
        "errorWorkflow": "Error Handler Workflow"
      },
      "tags": [
        "content",
        "notion",
        "ai",
        "enhanced"
      ]
    },
    {
      "name": "Content Pipeline - Publish to Ghost (Enhanced)",
      "nodes": [
        {
          "parameters": {
            "triggerOn": "update",
            "databaseId": "{{ $env.NOTION_CONTENT_DB_ID }}",
            "filters": {
              "property": "Status",
              "select": {
                "equals": "Ready"
              }
            }
          },
          "id": "1",
          "name": "Notion Trigger (Ready)",
          "type": "n8n-nodes-base.notionTrigger",
          "typeVersion": 1,
          "position": [200, 300]
        },
        {
          "parameters": {
            "operation": "get",
            "pageId": "={{$json['id']}}"
          },
          "id": "2",
          "name": "Get Page Details",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [450, 300]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "ai_output_check",
                  "leftValue": "={{$json['properties']['AI Output']['rich_text'][0]['plain_text']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                },
                {
                  "id": "title_check",
                  "leftValue": "={{$json['properties']['Titel']['title'][0]['plain_text']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "3",
          "name": "Validate Ready Content",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [650, 300]
        },
        {
          "parameters": {
            "jsCode": "// Prepare Ghost post data with proper escaping\nconst title = $input.first().json.properties['Titel'].title[0].plain_text;\nconst content = $input.first().json.properties['AI Output'].rich_text[0].plain_text;\nconst excerpt = $input.first().json.properties['Samenvatting (Excerpt)'].rich_text[0]?.plain_text || '';\nconst category = $input.first().json.properties['Categorie'].multi_select[0]?.name || 'General';\nconst tool = $input.first().json.properties['Tool'].select?.name || 'Unknown';\n\n// Escape HTML content\nconst escapeHtml = (text) => {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n};\n\n// Convert plain text to HTML with basic formatting\nconst formatContent = (text) => {\n  return text\n    .replace(/\\n\\n/g, '</p><p>')\n    .replace(/\\n/g, '<br>')\n    .replace(/^/, '<p>')\n    .replace(/$/, '</p>');\n};\n\nconst ghostPost = {\n  posts: [{\n    title: escapeHtml(title),\n    html: formatContent(escapeHtml(content)),\n    status: 'published',\n    tags: [category, tool],\n    custom_excerpt: escapeHtml(excerpt),\n    meta_description: escapeHtml(excerpt),\n    feature_image: $input.first().json.properties['Featured Image']?.files?.[0]?.url || null\n  }]\n};\n\nreturn {\n  json: ghostPost\n};"
          },
          "id": "4",
          "name": "Prepare Ghost Data",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [850, 200]
        },
        {
          "parameters": {
            "authentication": "predefinedCredentialType",
            "requestMethod": "POST",
            "url": "={{$env.GHOST_URL}}/ghost/api/admin/posts/?source=html",
            "jsonParameters": true,
            "options": {
              "timeout": 30000,
              "retry": {
                "enabled": true,
                "maxRetries": 3,
                "retryDelay": 1000
              }
            },
            "sendHeaders": true,
            "headerParametersJson": "{\"Authorization\":\"Ghost {{$env.GHOST_ADMIN_API_KEY}}\",\"Content-Type\":\"application/json\"}",
            "bodyParametersJson": "={{$json}}"
          },
          "id": "5",
          "name": "Post to Ghost",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1050, 200],
          "retryOnFail": true,
          "maxRetries": 3
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "ghost_success_check",
                  "leftValue": "={{$node['Post to Ghost'].json['posts'][0]['url']}}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "isNotEmpty"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "6",
          "name": "Check Ghost Success",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [1250, 200]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "Status": {
                "select": {
                  "name": "Published"
                }
              },
              "Publicatie-URL": {
                "url": "={{$node['Post to Ghost'].json['posts'][0]['url']}}"
              },
              "Ghost Post ID": {
                "rich_text": [
                  {
                    "text": {
                      "content": "={{$node['Post to Ghost'].json['posts'][0]['id']}}"
                    }
                  }
                ]
              },
              "Publish Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "7",
          "name": "Update Page (Published)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [1450, 100]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "Status": {
                "select": {
                  "name": "Error"
                }
              },
              "Error Message": {
                "rich_text": [
                  {
                    "text": {
                      "content": "Ghost publication failed - missing AI output or title"
                    }
                  }
                ]
              },
              "Processing Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "8",
          "name": "Update Page (Validation Error)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [850, 400]
        },
        {
          "parameters": {
            "operation": "update",
            "pageId": "={{$json['id']}}",
            "properties": {
              "Status": {
                "select": {
                  "name": "Error"
                }
              },
              "Error Message": {
                "rich_text": [
                  {
                    "text": {
                      "content": "Ghost API error: {{$node['Post to Ghost'].json['errors'][0]['message'] || 'Unknown error'}}"
                    }
                  }
                ]
              },
              "Processing Date": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              }
            }
          },
          "id": "9",
          "name": "Update Page (Ghost Error)",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [1450, 400]
        },
        {
          "parameters": {
            "url": "={{$env.WEBHOOK_URL}}",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "workflow",
                  "value": "Ghost Publishing"
                },
                {
                  "name": "status",
                  "value": "success"
                },
                {
                  "name": "page_id",
                  "value": "={{$json['id']}}"
                },
                {
                  "name": "ghost_url",
                  "value": "={{$node['Post to Ghost'].json['posts'][0]['url']}}"
                }
              ]
            },
            "options": {}
          },
          "id": "10",
          "name": "Send Success Notification",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1650, 100]
        },
        {
          "parameters": {
            "url": "={{$env.WEBHOOK_URL}}",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "workflow",
                  "value": "Ghost Publishing"
                },
                {
                  "name": "status",
                  "value": "error"
                },
                {
                  "name": "page_id",
                  "value": "={{$json['id']}}"
                },
                {
                  "name": "error_message",
                  "value": "={{$json['properties']['Error Message']['rich_text'][0]['plain_text']}}"
                }
              ]
            },
            "options": {}
          },
          "id": "11",
          "name": "Send Error Notification",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1650, 400]
        }
      ],
      "connections": {
        "Notion Trigger (Ready)": {
          "main": [
            [
              {
                "node": "Get Page Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Page Details": {
          "main": [
            [
              {
                "node": "Validate Ready Content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Validate Ready Content": {
          "main": [
            [
              {
                "node": "Prepare Ghost Data",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Update Page (Validation Error)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Ghost Data": {
          "main": [
            [
              {
                "node": "Post to Ghost",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Post to Ghost": {
          "main": [
            [
              {
                "node": "Check Ghost Success",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Ghost Success": {
          "main": [
            [
              {
                "node": "Update Page (Published)",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Update Page (Ghost Error)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Page (Published)": {
          "main": [
            [
              {
                "node": "Send Success Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Page (Ghost Error)": {
          "main": [
            [
              {
                "node": "Send Error Notification",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "sequential",
        "saveManualExecutions": true,
        "callerPolicy": "workflowsFromSameOwner",
        "errorWorkflow": "Error Handler Workflow"
      },
      "tags": [
        "content",
        "notion",
        "ghost",
        "publish",
        "enhanced"
      ]
    },
    {
      "name": "Error Handler Workflow",
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "error-handler",
            "options": {}
          },
          "id": "1",
          "name": "Error Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [200, 300]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "error_type_check",
                  "leftValue": "={{$json['error']['type']}}",
                  "rightValue": "workflow",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "2",
          "name": "Check Error Type",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [400, 300]
        },
        {
          "parameters": {
            "url": "={{$env.SLACK_WEBHOOK_URL}}",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "text",
                  "value": "🚨 Workflow Error Alert\n\nWorkflow: {{$json['workflow']['name']}}\nError: {{$json['error']['message']}}\nTime: {{new Date().toISOString()}}\nExecution ID: {{$json['execution']['id']}}"
                }
              ]
            },
            "options": {}
          },
          "id": "3",
          "name": "Send Slack Alert",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [600, 200]
        },
        {
          "parameters": {
            "operation": "create",
            "databaseId": "{{ $env.NOTION_ERROR_LOG_DB_ID }}",
            "properties": {
              "Workflow Name": {
                "title": [
                  {
                    "text": {
                      "content": "={{$json['workflow']['name']}}"
                    }
                  }
                ]
              },
              "Error Message": {
                "rich_text": [
                  {
                    "text": {
                      "content": "={{$json['error']['message']}}"
                    }
                  }
                ]
              },
              "Execution ID": {
                "rich_text": [
                  {
                    "text": {
                      "content": "={{$json['execution']['id']}}"
                    }
                  }
                ]
              },
              "Timestamp": {
                "date": {
                  "start": "={{new Date().toISOString()}}"
                }
              },
              "Status": {
                "select": {
                  "name": "New"
                }
              }
            }
          },
          "id": "4",
          "name": "Log Error to Notion",
          "type": "n8n-nodes-base.notion",
          "typeVersion": 1,
          "position": [600, 400]
        }
      ],
      "connections": {
        "Error Webhook": {
          "main": [
            [
              {
                "node": "Check Error Type",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Error Type": {
          "main": [
            [
              {
                "node": "Send Slack Alert",
                "type": "main",
                "index": 0
              },
              {
                "node": "Log Error to Notion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "sequential",
        "saveManualExecutions": true
      },
      "tags": [
        "error-handling",
        "monitoring",
        "alerts"
      ]
    }
  ],
  "environment_variables": {
    "NOTION_CONTENT_DB_ID": "Your Notion Content Database ID",
    "NOTION_ERROR_LOG_DB_ID": "Your Notion Error Log Database ID",
    "GHOST_URL": "https://your-ghost-site.com",
    "GHOST_ADMIN_API_KEY": "Your Ghost Admin API Key",
    "OPENAI_API_KEY": "Your OpenAI API Key",
    "WEBHOOK_URL": "Your webhook URL for notifications",
    "SLACK_WEBHOOK_URL": "Your Slack webhook URL for alerts"
  },
  "documentation": {
    "setup_instructions": [
      "1. Create a Notion database with the following properties:",
      "   - Titel (Title)",
      "   - Inhoud (Body) (Rich Text)",
      "   - AI Output (Rich Text)",
      "   - AI Review (Checkbox)",
      "   - Status (Select: In Progress, Ready, Published, Error)",
      "   - Categorie (Multi-select)",
      "   - Tool (Select)",
      "   - Samenvatting (Excerpt) (Rich Text)",
      "   - Publicatie-URL (URL)",
      "   - Ghost Post ID (Rich Text)",
      "   - Error Message (Rich Text)",
      "   - Processing Date (Date)",
      "   - Publish Date (Date)",
      "   - Featured Image (Files)",
      "",
      "2. Create a separate Notion database for error logging with:",
      "   - Workflow Name (Title)",
      "   - Error Message (Rich Text)",
      "   - Execution ID (Rich Text)",
      "   - Timestamp (Date)",
      "   - Status (Select: New, Investigating, Resolved)",
      "",
      "3. Set up environment variables in n8n:",
      "   - NOTION_CONTENT_DB_ID",
      "   - NOTION_ERROR_LOG_DB_ID",
      "   - GHOST_URL",
      "   - GHOST_ADMIN_API_KEY",
      "   - OPENAI_API_KEY",
      "   - WEBHOOK_URL",
      "   - SLACK_WEBHOOK_URL",
      "",
      "4. Configure credentials:",
      "   - OpenAI API credential",
      "   - Notion API credential",
      "   - Ghost Admin API credential",
      "",
      "5. Test the workflows with sample data",
      "",
      "6. Set up monitoring and alerts"
    ],
    "improvements_made": [
      "✅ Added comprehensive error handling and validation",
      "✅ Implemented retry mechanisms for API calls",
      "✅ Added data validation checks for required fields",
      "✅ Improved security by using environment variables",
      "✅ Added HTML escaping and content formatting",
      "✅ Implemented proper status tracking",
      "✅ Added error logging and notification system",
      "✅ Created separate error handler workflow",
      "✅ Added webhook notifications for success/failure",
      "✅ Improved AI prompt with better instructions",
      "✅ Added minimum content length validation",
      "✅ Implemented proper HTML formatting for Ghost",
      "✅ Added featured image support",
      "✅ Created comprehensive documentation"
    ]
  }
}
